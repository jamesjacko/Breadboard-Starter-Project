/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Board, StreamCapability, isStreamCapability, } from "@google-labs/breadboard";
const getTransformer = async (board, context) => {
    if (board) {
        const runnableBoard = await Board.fromBreadboardCapability(board);
        // Because stream transformers run outside of the normal board lifecycle,
        // they will not have access to `probe` capabilities and thus will not
        // send diagnostics back.
        // We need to figure out how enable this.
        return {
            async transform(chunk, controller) {
                const inputs = { chunk };
                const result = await runnableBoard.runOnce(inputs, {
                    ...context,
                    // TODO: figure out how to send diagnostics from streams transformer.
                    probe: undefined,
                });
                controller.enqueue({ chunk: result.chunk });
            },
        };
    }
    else
        return {
            transform(chunk, controller) {
                controller.enqueue(chunk);
            },
        };
};
export default {
    invoke: async (inputs, context) => {
        const { stream, board, decode = false } = inputs;
        if (!stream)
            throw new Error("The `stream` input is required");
        if (!isStreamCapability(stream))
            throw new Error("The `stream` input must be a `StreamCapability`.");
        const transformer = await getTransformer(board, context);
        const streamCapability = stream;
        const decoder = decode ? new TextDecoderStream() : new TransformStream();
        const outputStream = streamCapability.stream
            .pipeThrough(decoder)
            .pipeThrough(new TransformStream(transformer));
        return { stream: new StreamCapability(outputStream) };
    },
};
//# sourceMappingURL=transform-stream.js.map