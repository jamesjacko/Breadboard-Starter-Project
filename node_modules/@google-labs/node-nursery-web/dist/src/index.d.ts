/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
declare const NodeNurseryWeb: import("@google-labs/breadboard").KitConstructor<import("@google-labs/breadboard").GenericKit<{
    credentials: {
        invoke: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    };
    driveList: {
        invoke: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    };
    transformStream: {
        invoke: (inputs: import("@google-labs/breadboard").InputValues, context?: import("@google-labs/breadboard").NodeHandlerContext | undefined) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    };
    listToStream: {
        invoke: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    };
}>>;
export default NodeNurseryWeb;
export type NodeNurseryWeb = InstanceType<typeof NodeNurseryWeb>;
export { NodeNurseryWeb };
/**
 * This is a wrapper around existing kits for the new syntax to add types.
 *
 * This should transition to a codegen step, with typescript types constructed
 * from .describe() calls.
 */
import { NewNodeValue as NodeValue, NewNodeFactory as NodeFactory } from "@google-labs/breadboard";
export declare const nursery: {
    transformStream: NodeFactory<{
        stream: NodeValue;
        board: NodeValue;
        decode?: boolean;
    }, {
        stream: NodeValue;
    }>;
    listToStream: NodeFactory<{
        list: NodeValue[];
    }, {
        stream: NodeValue;
    }>;
};
//# sourceMappingURL=index.d.ts.map