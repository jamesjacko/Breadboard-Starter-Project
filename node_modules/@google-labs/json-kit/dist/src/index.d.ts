/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import schemish from "./nodes/schemish.js";
import { NewNodeValue as NodeValue, NewNodeFactory as NodeFactory } from "@google-labs/breadboard";
declare const JSONKit: import("@google-labs/breadboard").KitConstructor<import("@google-labs/breadboard").GenericKit<{
    validateJson: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    schemish: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    jsonata: {
        describe: import("@google-labs/breadboard").NodeDescriberFunction;
        invoke: import("@google-labs/breadboard").NodeHandlerFunction;
    };
    xmlToJson: {
        describe: () => Promise<{
            inputSchema: {
                properties: {
                    xml: {
                        title: string;
                        description: string;
                    };
                };
            };
            outputSchema: {
                properties: {
                    json: {
                        title: string;
                        description: string;
                    };
                };
            };
        }>;
        invoke: (inputs: import("@google-labs/breadboard").InputValues) => Promise<Partial<Record<string, import("@google-labs/breadboard").NodeValue>>>;
    };
}>>;
export default JSONKit;
export type JSONKit = InstanceType<typeof JSONKit>;
export declare const json: {
    validateJson: NodeFactory<{
        json: string;
        schema: NodeValue;
    }, {
        json: NodeValue;
    } | {
        $error: NodeValue;
    }>;
    schemish: NodeFactory<{
        schema: NodeValue;
    }, {
        schemish: NodeValue;
    }>;
    jsonata: NodeFactory<{
        expression: string;
        json: string;
        raw: boolean;
    } | {
        [key: string]: unknown;
        expression: string;
        raw: boolean;
    }, {
        result: string;
    } | {
        [key: string]: unknown;
    }>;
    xmlToJson: NodeFactory<{
        xml: string;
    }, {
        json: NodeValue;
    }>;
};
//# sourceMappingURL=index.d.ts.map