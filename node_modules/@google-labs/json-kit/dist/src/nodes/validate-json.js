/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import Ajv from "ajv";
export const stripCodeBlock = (code) => code.replace(/(?:```(?:json)?\n+)(.*)(?:\n+```)/gms, "$1");
export const tryParseJson = (json) => {
    try {
        return JSON.parse(stripCodeBlock(json));
    }
    catch (e) {
        const error = e;
        return {
            $error: {
                kind: "error",
                error: { type: "parsing", message: error.message },
            },
        };
    }
};
export const validateJson = (parsed, schema) => {
    const result = { json: parsed };
    if (!schema)
        return result;
    const validator = new Ajv.default();
    const validate = validator.compile(schema);
    const valid = validate(parsed);
    if (!valid) {
        return {
            $error: {
                kind: "error",
                error: {
                    type: "validation",
                    message: validator.errorsText(validate.errors),
                },
            },
        };
    }
    return result;
};
export default async (inputs) => {
    const { json, schema } = inputs;
    if (!json)
        throw new Error("The `json` input is required.");
    // First, let's try to parse JSON.
    const parsed = tryParseJson(json);
    const possiblyInvalid = parsed;
    if (possiblyInvalid?.$error)
        return possiblyInvalid;
    // Then, let's make sure we have schema in the right format.
    let parsedSchema = schema;
    if (schema && typeof schema === "string") {
        try {
            parsedSchema = tryParseJson(schema);
        }
        catch (e) {
            throw new Error("The `schema` input is not valid JSON.");
        }
    }
    // Now, let's try to validate JSON.
    return validateJson(parsed, parsedSchema);
};
//# sourceMappingURL=validate-json.js.map