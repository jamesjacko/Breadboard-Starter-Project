/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { parseXml, } from "@rgrove/parse-xml";
const properName = (name) => {
    return name.replace(/:/g, "$");
};
/**
 * Converts to alt-json format, as outlined in:
 * https://developers.google.com/gdata/docs/json
 * @param node
 * @returns
 */
const toAltJson = (node) => {
    if (node.type === "document") {
        const doc = node;
        const element = doc.children.find((child) => child.type === "element");
        const [name, value] = toAltJson(element);
        return ["$doc", element ? { [name]: value } : ""];
    }
    if (node.type === "element") {
        const element = node;
        const childEntries = element.children.map(toAltJson);
        const children = Object.fromEntries(childEntries.reduce((map, [name, value]) => {
            map.has(name) ? map.get(name).push(value) : map.set(name, [value]);
            return map;
        }, new Map()));
        return [properName(element.name), { ...children, ...element.attributes }];
    }
    if (node.type === "text") {
        const text = node;
        return ["$t", text.text];
    }
    return ["$c", ""];
};
export default {
    describe: async () => {
        return {
            inputSchema: {
                properties: {
                    xml: {
                        title: "XML",
                        description: "Valid XML as a string",
                    },
                },
            },
            outputSchema: {
                properties: {
                    json: {
                        title: "JSON",
                        description: "JSON representation of the input XML. Represented as alt-json, described in https://developers.google.com/gdata/docs/json",
                    },
                },
            },
        };
    },
    invoke: async (inputs) => {
        const { xml } = inputs;
        if (!xml)
            throw new Error("XmlToJson requires `xml` input");
        const json = toAltJson(parseXml(xml));
        return { json };
    },
};
//# sourceMappingURL=xml-to-json.js.map