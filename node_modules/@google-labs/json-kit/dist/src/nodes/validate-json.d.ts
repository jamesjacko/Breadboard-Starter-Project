/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import type { InputValues, NodeValue, OutputValues, Schema } from "@google-labs/breadboard";
export type ValidateJsonInputs = InputValues & {
    /**
     * The string to validate as JSON.
     */
    json: string;
    /**
     * Optional schema to validate against.
     */
    schema?: NodeValue;
};
export type ValidationErrorType = "parsing" | "validation";
export type InvalidJsonOutputs = OutputValues & {
    /**
     * The error if the JSON is invalid.
     */
    $error: {
        kind: "error";
        error: {
            /**
             * The type of error.
             */
            type: ValidationErrorType;
            /**
             * The message of the error.
             */
            message: string;
        };
    };
};
export type ValidatedJsonOutputs = OutputValues & {
    /**
     * The validated JSON.
     */
    json: NodeValue;
};
export type ValidateJsonOutputs = InvalidJsonOutputs | ValidatedJsonOutputs;
export declare const stripCodeBlock: (code: string) => string;
export declare const tryParseJson: (json: string) => InvalidJsonOutputs | NodeValue;
export declare const validateJson: (parsed: NodeValue, schema: Schema) => ValidateJsonOutputs;
declare const _default: (inputs: InputValues) => Promise<OutputValues>;
export default _default;
//# sourceMappingURL=validate-json.d.ts.map