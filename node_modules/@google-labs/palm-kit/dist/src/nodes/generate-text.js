/**
 * @license
 * Copyright 2023 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { Text, palm, } from "@google-labs/palm-lite";
export const prepareRequest = (inputs) => {
    const values = inputs;
    if (!values.PALM_KEY)
        throw new Error("Text completion requires `PALM_KEY` input");
    if (!values.text)
        throw new Error("Text completion requires `text` input");
    const prompt = new Text().text(values.text);
    const stopSequences = values.stopSequences || [];
    stopSequences.forEach((stopSequence) => prompt.addStopSequence(stopSequence));
    const safetySettings = values.safetySettings || [];
    safetySettings.forEach((safetySetting) => prompt.addSafetySetting(safetySetting.category, safetySetting.threshold));
    return palm(values.PALM_KEY).text(prompt);
};
export const prepareResponse = async (data) => {
    const json = await data.json();
    const response = json;
    const completion = response?.candidates?.[0]?.output;
    if (completion)
        return { completion, ...json };
    else
        return {
            $error: {
                kind: "error",
                error: new Error("Palm generateText failed: " +
                    (data.ok ? JSON.stringify(json) : data.statusText)),
                status: data.status,
                ...json,
            },
        };
};
export const generateTextDescriber = async () => {
    return {
        inputSchema: {
            type: "object",
            properties: {
                text: {
                    title: "text",
                    description: "Prompt for text completion.",
                    type: "string",
                },
                PALM_KEY: {
                    title: "PALM_KEY",
                    description: "The Google Cloud Platform API key",
                    type: "string",
                },
                stopSequences: {
                    title: "stopSequences",
                    description: "Stop sequences",
                    type: "array",
                    items: {
                        type: "string",
                    },
                },
                safetySettings: {
                    title: "safetySettings",
                    description: "Safety settings",
                    type: "array",
                    items: {
                        type: "object",
                        required: ["category", "threshold"],
                    },
                },
            },
            required: ["text", "PALM_KEY"],
        },
        outputSchema: {
            type: "object",
            properties: {
                completion: {
                    title: "completion",
                    description: "The generated text completion of the supplied text input.",
                    type: "string",
                },
                $error: {
                    title: "$error",
                    description: "Error information, if any.",
                    type: "object",
                },
            },
        },
    };
};
export default {
    describe: generateTextDescriber,
    invoke: async (inputs) => {
        return await prepareResponse(await fetch(prepareRequest(inputs)));
    },
};
//# sourceMappingURL=generate-text.js.map